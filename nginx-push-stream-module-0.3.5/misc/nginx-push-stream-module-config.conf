#pid         logs/nginx.pid;
error_log   /data/logs/nginx-main_error.log warn;

# Development Mode
# master_process      off;
# daemon              off;
#worker_rlimit_core  500M;
#working_directory /tmp/nginx;
worker_rlimit_nofile 2000000;

worker_processes    12;
#worker_cpu_affinity auto;
worker_cpu_affinity 000000000001 000000000010 000000000100 000000001000 000000010000 000000100000 000001000000 000010000000 000100000000 001000000000 010000000000 100000000000;

events {
    worker_connections  2000000;
    use                 epoll;
}

http {
    include         mime.types;
    default_type    application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                        '"$status" $body_bytes_sent "$http_referer" '
                                        '"$http_user_agent" "$http_if_modified_since" "$upstream_http_last_modified"';

    #access_log      /data/logs/nginx-http_access.log main;
    access_log off;
    error_log       /data/logs/nginx-http_error.log warn;

    request_pool_size               1k;
    tcp_nopush                      off;
    tcp_nodelay                     on;
    keepalive_timeout               10;
    send_timeout                    10;
    client_body_timeout             10;
    client_header_timeout           10;
    sendfile                        on;
    client_header_buffer_size       1k;
    large_client_header_buffers     2 4k;
    client_max_body_size            1k;
    client_body_buffer_size         1k;
    ignore_invalid_headers          on;

    push_stream_shared_memory_size              2048m;
    push_stream_max_channel_id_length           200;

    # max messages to store in memory
    push_stream_max_messages_stored_per_channel 50;
    # message ttl
    push_stream_message_ttl                     720m;
    # ping frequency
    push_stream_ping_message_interval           1s;
    # connection ttl to enable recycle
    push_stream_subscriber_connection_ttl       15m;
    # connection ttl for long polling
    push_stream_longpolling_connection_ttl      30s;
    push_stream_timeout_with_body               off;

    # wildcard
    push_stream_wildcard_channel_prefix       "broad_";
    push_stream_wildcard_channel_max_qtd        3;

    #push_stream_message_template               "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\",\"eventid\":\"~event-id~\"}";
    push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"time\":\"~time~\",\"text\":~text~}";

    # subscriber may create channels on demand or only authorized
    # (publisher) may do it?
    push_stream_authorized_channels_only        off;
    push_stream_allowed_origins                 "*";


    server {
        listen       80 backlog=8192;
        listen       9001 backlog=8192;
        listen       9002 backlog=8192;
        listen       9003 backlog=8192;
        listen       9004 backlog=8192;
        listen       9005 backlog=8192;
        listen       9006 backlog=8192;
        listen       9007 backlog=8192;
        listen       9008 backlog=8192;
        listen       9009 backlog=8192;
        listen       9010 backlog=8192;
        listen       9011 backlog=8192;
        listen       9012 backlog=8192;
        #listen          9443 ssl;
        #ssl_certificate     /usr/local/nginx/ssl/server.crt;
        #ssl_certificate_key /usr/local/nginx/ssl/server.key;
        server_name     notice.sjk.ijinshan.com;

        location /date {
            # ssi on;
            #add_header Content-Type "text/json;charset=utf-8";
            #return 200 "{\"date\": $date_local}";
    	    #proxy_pass http://localhost:8090/date;
    	    default_type application/json;
    	    content_by_lua '
    		  local num = ngx.time() - 8*60*60
    		  ngx.say("{date:" .. tostring(num) .. "}")
    		  return
    		';
            access_log off;
        }

        location /pub {
            # activate publisher mode for this location, with admin support
            push_stream_publisher admin;

            # query string based channel id
            push_stream_channels_path           $arg_id;

            # store messages in memory
            push_stream_store_messages              on;

            # Message size limit
            # client_max_body_size MUST be equal to client_body_buffer_size or
            # you will be sorry.
            client_max_body_size                    32k;
            client_body_buffer_size                 32k;

        }


        location /channels-stats {
            # activate channels statistics mode for this location
            push_stream_channels_statistics;

            # query string based channel id
            push_stream_channels_path           $arg_id;
        }



        location ~ /sub/(.*) {
            # activate subscriber mode for this location
            push_stream_subscriber;

            # positional channel path
            push_stream_channels_path              $1;
            if ($arg_tests = "on") {
              push_stream_channels_path                 "test_$1";
            }

            # header to be sent when receiving new subscriber connection
            push_stream_header_template                 "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-store\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-cache\">\r\n<meta http-equiv=\"Pragma\" content=\"no-cache\">\r\n<meta http-equiv=\"Expires\" content=\"Thu, 1 Jan 1970 00:00:00 GMT\">\r\n<script type=\"text/javascript\">\r\nwindow.onError = null;\r\ntry{ document.domain = (window.location.hostname.match(/^(\d{1,3}\.){3}\d{1,3}$/)) ? window.location.hostname : window.location.hostname.split('.').slice(-1 * Math.max(window.location.hostname.split('.').length - 1, (window.location.hostname.match(/(\w{4,}\.\w{2}|\.\w{3,})$/) ? 2 : 3))).join('.');}catch(e){}\r\nparent.PushStream.register(this);\r\n</script>\r\n</head>\r\n<body>";

            # message template
            #push_stream_message_template                "<script>p(~id~,'~channel~','~text~','~event-id~');</script>";
            push_stream_message_template                "<script>p(~id~,'~channel~','~text~');</script>";
            # footer to be sent when finishing subscriber connection
            push_stream_footer_template                 "</body></html>";
            # content-type
            default_type                    "text/html; charset=utf-8";

            if ($arg_qs = "on") {
              push_stream_last_received_message_time "$arg_time";
              push_stream_last_received_message_tag  "$arg_tag";
              push_stream_last_event_id              "$arg_eventid";
            }
        }

        location ~ /ev/(.*) {
            # activate event source mode for this location
            push_stream_subscriber eventsource;

            # positional channel path
            push_stream_channels_path              $1;

            if ($arg_tests = "on") {
              push_stream_channels_path                 "test_$1";
            }

            if ($arg_qs = "on") {
              push_stream_last_received_message_time "$arg_time";
              push_stream_last_received_message_tag  "$arg_tag";
              push_stream_last_event_id              "$arg_eventid";
            }
        }

        location ~ /lp/(.*) {
    	  	default_type	application/json;
    		push_stream_subscriber      long-polling;

    		push_stream_channels_path         $1;

    		if ($arg_tests = "on") {
    			push_stream_channels_path                 "test_$1";
    		}

    		if ($arg_qs = "on") {
    			push_stream_last_received_message_time "$arg_time";
    			push_stream_last_received_message_tag  "$arg_tag";
    			push_stream_last_event_id              "$arg_eventid";
    		}

	        push_stream_subscriber_connection_ttl	1800s;
	        push_stream_longpolling_connection_ttl	1800s;
        }

        location ~ /ws/(.*) {
            # activate websocket mode for this location
            push_stream_subscriber websocket;

            # positional channel path
            push_stream_channels_path                   $1;
            if ($arg_tests = "on") {
              push_stream_channels_path                 "test_$1";
            }

            # store messages in memory
            push_stream_store_messages              on;

            push_stream_websocket_allow_publish     on;

            if ($arg_qs = "on") {
              push_stream_last_received_message_time "$arg_time";
              push_stream_last_received_message_tag  "$arg_tag";
              push_stream_last_event_id              "$arg_eventid";
            }
        }

        location / {
            content_by_lua '
                ngx.say("Your request is invalid!")
                return
            ';
        }
}

	#include vhosts/*.conf;

}